package auth

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// Client is the auth Client
type Client struct {
	BaseClient
}

// NewClient creates an instance of the Client client.
func NewClient() Client {
	return NewClientWithBaseURI(DefaultBaseURI)
}

// NewClientWithBaseURI creates an instance of the Client client using a custom endpoint.  Use this when interacting
// with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewClientWithBaseURI(baseURI string) Client {
	return Client{NewWithBaseURI(baseURI)}
}

// Login authentication Login
// Parameters:
// password - base64 encoded string
func (client Client) Login(ctx context.Context, username string, password string) (result LoginResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.Login")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.LoginPreparer(ctx, username, password)
	if err != nil {
		err = autorest.NewErrorWithError(err, "auth.Client", "Login", nil, "Failure preparing request")
		return
	}

	resp, err := client.LoginSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "auth.Client", "Login", resp, "Failure sending request")
		return
	}

	result, err = client.LoginResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "auth.Client", "Login", resp, "Failure responding to request")
		return
	}

	return
}

// LoginPreparer prepares the Login request.
func (client Client) LoginPreparer(ctx context.Context, username string, password string) (*http.Request, error) {
	formDataParameters := map[string]interface{}{}
	if len(username) > 0 {
		formDataParameters["username"] = username
	}
	if len(password) > 0 {
		formDataParameters["password"] = password
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/auth/login"),
		autorest.WithFormData(autorest.MapToValues(formDataParameters)))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// LoginSender sends the Login request. The method will close the
// http.Response Body if it receives an error.
func (client Client) LoginSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// LoginResponder handles the response to the Login request. The method always
// closes the http.Response Body.
func (client Client) LoginResponder(resp *http.Response) (result LoginResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Logout authentication Logout
func (client Client) Logout(ctx context.Context) (result LogoutResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.Logout")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.LogoutPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "auth.Client", "Logout", nil, "Failure preparing request")
		return
	}

	resp, err := client.LogoutSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "auth.Client", "Logout", resp, "Failure sending request")
		return
	}

	result, err = client.LogoutResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "auth.Client", "Logout", resp, "Failure responding to request")
		return
	}

	return
}

// LogoutPreparer prepares the Logout request.
func (client Client) LogoutPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/auth/logout"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// LogoutSender sends the Logout request. The method will close the
// http.Response Body if it receives an error.
func (client Client) LogoutSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// LogoutResponder handles the response to the Logout request. The method always
// closes the http.Response Body.
func (client Client) LogoutResponder(resp *http.Response) (result LogoutResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
