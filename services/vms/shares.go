package vms

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// SharesClient is the VM Client
type SharesClient struct {
	BaseClient
}

// NewSharesClient creates an instance of the SharesClient client.
func NewSharesClient() SharesClient {
	return NewSharesClientWithBaseURI(DefaultBaseURI)
}

// NewSharesClientWithBaseURI creates an instance of the SharesClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewSharesClientWithBaseURI(baseURI string) SharesClient {
	return SharesClient{NewWithBaseURI(baseURI)}
}

// Create create a New VM Share Link
func (client SharesClient) Create(ctx context.Context, vmid int32, data *SharelinkSerializer) (result ShareLinkCreateResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SharesClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: data,
			Constraints: []validation.Constraint{{Target: "data", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "data.EndLocaltime", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "data.EndTime", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "data.ID", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "data.Sid", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "data.StartTime", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "data.ValidTime", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "data.VMID", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("vms.SharesClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, vmid, data)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client SharesClient) CreatePreparer(ctx context.Context, vmid int32, data *SharelinkSerializer) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/share", pathParameters))
	if data != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(data))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client SharesClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client SharesClient) CreateResponder(resp *http.Response) (result ShareLinkCreateResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Destroy delete a VM Share Link
func (client SharesClient) Destroy(ctx context.Context, vmid int32, ID int32) (result ShareLinkDestroyResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SharesClient.Destroy")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DestroyPreparer(ctx, vmid, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Destroy", nil, "Failure preparing request")
		return
	}

	resp, err := client.DestroySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Destroy", resp, "Failure sending request")
		return
	}

	result, err = client.DestroyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Destroy", resp, "Failure responding to request")
		return
	}

	return
}

// DestroyPreparer prepares the Destroy request.
func (client SharesClient) DestroyPreparer(ctx context.Context, vmid int32, ID int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":    autorest.Encode("path", ID),
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/share/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DestroySender sends the Destroy request. The method will close the
// http.Response Body if it receives an error.
func (client SharesClient) DestroySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DestroyResponder handles the response to the Destroy request. The method always
// closes the http.Response Body.
func (client SharesClient) DestroyResponder(resp *http.Response) (result ShareLinkDestroyResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List list Share Links by VM ID
func (client SharesClient) List(ctx context.Context, vmid int32) (result ShareLinkListResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SharesClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx, vmid)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "List", resp, "Failure responding to request")
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client SharesClient) ListPreparer(ctx context.Context, vmid int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/share", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client SharesClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client SharesClient) ListResponder(resp *http.Response) (result ShareLinkListResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Retrieve find a  VM Share Link
func (client SharesClient) Retrieve(ctx context.Context, vmid int32, ID int32) (result ShareLinkRetrieveResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SharesClient.Retrieve")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RetrievePreparer(ctx, vmid, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Retrieve", nil, "Failure preparing request")
		return
	}

	resp, err := client.RetrieveSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Retrieve", resp, "Failure sending request")
		return
	}

	result, err = client.RetrieveResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Retrieve", resp, "Failure responding to request")
		return
	}

	return
}

// RetrievePreparer prepares the Retrieve request.
func (client SharesClient) RetrievePreparer(ctx context.Context, vmid int32, ID int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":    autorest.Encode("path", ID),
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/share/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RetrieveSender sends the Retrieve request. The method will close the
// http.Response Body if it receives an error.
func (client SharesClient) RetrieveSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RetrieveResponder handles the response to the Retrieve request. The method always
// closes the http.Response Body.
func (client SharesClient) RetrieveResponder(resp *http.Response) (result ShareLinkRetrieveResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Update modify VM Share Link setting
func (client SharesClient) Update(ctx context.Context, vmid int32, ID int32, body *WriteSharelinkSerializer) (result ShareLinkPartialUpdateResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SharesClient.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePreparer(ctx, vmid, ID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.SharesClient", "Update", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client SharesClient) UpdatePreparer(ctx context.Context, vmid int32, ID int32, body *WriteSharelinkSerializer) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":    autorest.Encode("path", ID),
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/share/{id}", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client SharesClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client SharesClient) UpdateResponder(resp *http.Response) (result ShareLinkPartialUpdateResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
