package vms

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// EnvironmentClient is the VM Client
type EnvironmentClient struct {
	BaseClient
}

// NewEnvironmentClient creates an instance of the EnvironmentClient client.
func NewEnvironmentClient() EnvironmentClient {
	return NewEnvironmentClientWithBaseURI(DefaultBaseURI)
}

// NewEnvironmentClientWithBaseURI creates an instance of the EnvironmentClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewEnvironmentClientWithBaseURI(baseURI string) EnvironmentClient {
	return EnvironmentClient{NewWithBaseURI(baseURI)}
}

// CreateMAC generate a MAC address
func (client EnvironmentClient) CreateMAC(ctx context.Context) (result GenerateMacResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EnvironmentClient.CreateMAC")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateMACPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.EnvironmentClient", "CreateMAC", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateMACSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.EnvironmentClient", "CreateMAC", resp, "Failure sending request")
		return
	}

	result, err = client.CreateMACResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.EnvironmentClient", "CreateMAC", resp, "Failure responding to request")
		return
	}

	return
}

// CreateMACPreparer prepares the CreateMAC request.
func (client EnvironmentClient) CreateMACPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/mac"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateMACSender sends the CreateMAC request. The method will close the
// http.Response Body if it receives an error.
func (client EnvironmentClient) CreateMACSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateMACResponder handles the response to the CreateMAC request. The method always
// closes the http.Response Body.
func (client EnvironmentClient) CreateMACResponder(resp *http.Response) (result GenerateMacResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
