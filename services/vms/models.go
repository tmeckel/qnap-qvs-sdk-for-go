package vms

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
)

// The package's fully qualified name.
const fqdn = "github.com/qnap/qvs-sdk-for-go/services/vms"

// ATAControllerCreateResponse ...
type ATAControllerCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *SATAControllerSerializer `json:"data,omitempty"`
	Status            *int32                    `json:"status,omitempty"`
}

// ATAControllerDestroyResponse ...
type ATAControllerDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// ATAControllerListResponse ...
type ATAControllerListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]SATAControllerSerializer `json:"data,omitempty"`
	Status            *int32                      `json:"status,omitempty"`
}

// ATAControllerRetrieveResponse ...
type ATAControllerRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *SATAControllerSerializer `json:"data,omitempty"`
	Status            *int32                    `json:"status,omitempty"`
}

// AdapterCreateResponse ...
type AdapterCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *AdapterSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// AdapterDestroyResponse ...
type AdapterDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
	Traceback         *string `json:"traceback,omitempty"`
}

// AdapterIpsResponse ...
type AdapterIpsResponse struct {
	autorest.Response `json:"-"`
	Status            *int32  `json:"status,omitempty"`
	Traceback         *string `json:"traceback,omitempty"`
}

// AdapterListResponse ...
type AdapterListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]AdapterSerializer `json:"data,omitempty"`
	Status            *int32               `json:"status,omitempty"`
	Traceback         *string              `json:"traceback,omitempty"`
}

// AdapterPartialUpdateResponse ...
type AdapterPartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *AdapterSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// AdapterRetrieveResponse ...
type AdapterRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *AdapterSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// AdapterSerializer ...
type AdapterSerializer struct {
	Bridge *string `json:"bridge,omitempty"`
	ID     *int32  `json:"id,omitempty"`
	Index  *int32  `json:"index,omitempty"`
	Mac    *string `json:"mac,omitempty"`
	Model  *string `json:"model,omitempty"`
	VMID   *int32  `json:"vm_id,omitempty"`
}

// AuthLoginResponse ...
type AuthLoginResponse struct {
	Data      *UserSerializer `json:"data,omitempty"`
	Status    *int32          `json:"status,omitempty"`
	Traceback *string         `json:"traceback,omitempty"`
}

// BackupCreateResponse ...
type BackupCreateResponse struct {
	Data      *BackupSerializer `json:"data,omitempty"`
	Status    *int32            `json:"status,omitempty"`
	Traceback *string           `json:"traceback,omitempty"`
}

// BackupDestroyResponse ...
type BackupDestroyResponse struct {
	Data      *string `json:"data,omitempty"`
	Status    *int32  `json:"status,omitempty"`
	Traceback *string `json:"traceback,omitempty"`
}

// BackupInfoSerializer ...
type BackupInfoSerializer struct {
	Data    *string `json:"data,omitempty"`
	Nas     *string `json:"nas,omitempty"`
	NasUUID *string `json:"nas_uuid,omitempty"`
	Size    *int64  `json:"size,omitempty"`
	Type    *string `json:"type,omitempty"`
	VMName  *string `json:"vm_name,omitempty"`
}

// BackupListResponse ...
type BackupListResponse struct {
	Data      *[]BackupSerializer `json:"data,omitempty"`
	Status    *int32              `json:"status,omitempty"`
	Traceback *string             `json:"traceback,omitempty"`
}

// BackupPartialUpdateResponse ...
type BackupPartialUpdateResponse struct {
	Data      *BackupSerializer `json:"data,omitempty"`
	Status    *int32            `json:"status,omitempty"`
	Traceback *string           `json:"traceback,omitempty"`
}

// BackupRetrieveResponse ...
type BackupRetrieveResponse struct {
	Data      *BackupSerializer `json:"data,omitempty"`
	Status    *int32            `json:"status,omitempty"`
	Traceback *string           `json:"traceback,omitempty"`
}

// BackupScheduleSerializer ...
type BackupScheduleSerializer struct {
	Days      *string `json:"days,omitempty"`
	Enable    *bool   `json:"enable,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	Hour      *int32  `json:"hour,omitempty"`
	ID        *int32  `json:"id,omitempty"`
	Interval  *int32  `json:"interval,omitempty"`
	Minute    *int32  `json:"minute,omitempty"`
}

// BackupSerializer ...
type BackupSerializer struct {
	BackupTasks           *[]string                      `json:"backup_tasks,omitempty"`
	Credential            *TemporaryCredentialSerializer `json:"credential,omitempty"`
	Description           *string                        `json:"description,omitempty"`
	ErrorMessage          *string                        `json:"error_message,omitempty"`
	ID                    *int32                         `json:"id,omitempty"`
	LastFinishedLocaltime *date.Time                     `json:"last_finished_localtime,omitempty"`
	LastStartedLocaltime  *date.Time                     `json:"last_started_localtime,omitempty"`
	Name                  *string                        `json:"name,omitempty"`
	RestoreOnly           *bool                          `json:"restore_only,omitempty"`
	Retention             *int32                         `json:"retention,omitempty"`
	Schedule              *BackupScheduleSerializer      `json:"schedule,omitempty"`
	Strategy              *string                        `json:"strategy,omitempty"`
	TargetPath            *string                        `json:"target_path,omitempty"`
	TargetType            *string                        `json:"target_type,omitempty"`
	UserID                *string                        `json:"user_id,omitempty"`
	VMID                  *string                        `json:"vm_id,omitempty"`
}

// BatchPostResponse ...
type BatchPostResponse struct {
	Data   *[]QVSResponse `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// Body ...
type Body struct {
	IsoPath *string `json:"isoPath,omitempty"`
}

// BodyModel ...
type BodyModel struct {
	Path   *string `json:"path,omitempty"`
	URL    *string `json:"url,omitempty"`
	FtpURL *string `json:"ftpUrl,omitempty"`
}

// CDROMCreateResponse ...
type CDROMCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *CDROMSerializer `json:"data,omitempty"`
	Status            *int32           `json:"status,omitempty"`
	Traceback         *string          `json:"traceback,omitempty"`
}

// CDROMDestroyResponse ...
type CDROMDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
	Traceback         *string `json:"traceback,omitempty"`
}

// CDROMInsertVMDriverResponse ...
type CDROMInsertVMDriverResponse struct {
	autorest.Response `json:"-"`
	Data              *CDROMSerializer `json:"data,omitempty"`
	Status            *int32           `json:"status,omitempty"`
	Traceback         *string          `json:"traceback,omitempty"`
}

// CDROMListResponse ...
type CDROMListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]CDROMSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// CDROMPartialUpdateResponse ...
type CDROMPartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *CDROMSerializer `json:"data,omitempty"`
	Status            *int32           `json:"status,omitempty"`
	Traceback         *string          `json:"traceback,omitempty"`
}

// CDROMRetrieveResponse ...
type CDROMRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *CDROMSerializer `json:"data,omitempty"`
	Status            *int32           `json:"status,omitempty"`
	Traceback         *string          `json:"traceback,omitempty"`
}

// CDROMSerializer ...
type CDROMSerializer struct {
	BootOrder *int32  `json:"boot_order,omitempty"`
	Bus       *string `json:"bus,omitempty"`
	Dev       *string `json:"dev,omitempty"`
	ID        *int32  `json:"id,omitempty"`
	Index     *int32  `json:"index,omitempty"`
	Path      *string `json:"path,omitempty"`
	PathExist *bool   `json:"path_exist,omitempty"`
	Size      *int32  `json:"size,omitempty"`
	VMID      *int32  `json:"vm_id,omitempty"`
}

// CheckIsoResponse ...
type CheckIsoResponse struct {
	autorest.Response `json:"-"`
	Data              *CheckIsoResponseData `json:"data,omitempty"`
	Status            *int32                `json:"status,omitempty"`
}

// CheckIsoResponseData ...
type CheckIsoResponseData struct {
	Editions *[]ISOEdition `json:"editions,omitempty"`
}

// CloneResponse ...
type CloneResponse struct {
	autorest.Response `json:"-"`
	Data              *TaskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
}

// ConversionSerializer ...
type ConversionSerializer struct {
	Source      *string `json:"source,omitempty"`
	Destination *string `json:"destination,omitempty"`
}

// CreateAutoInstallDeviceResponse ...
type CreateAutoInstallDeviceResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// CreateResponse ...
type CreateResponse struct {
	autorest.Response `json:"-"`
	Data              *Serializer `json:"data,omitempty"`
	Status            *int32      `json:"status,omitempty"`
}

// CreationGraphicSerializer ...
type CreationGraphicSerializer struct {
	Type           *string `json:"type,omitempty"`
	EnablePassword *bool   `json:"enable_password,omitempty"`
	Password       *string `json:"password,omitempty"`
}

// CreationInfoSerializer ...
type CreationInfoSerializer struct {
	Bridge      *string                    `json:"bridge,omitempty"`
	Cores       *int32                     `json:"cores,omitempty"`
	CPUModel    *string                    `json:"cpu_model,omitempty"`
	Description *string                    `json:"description,omitempty"`
	Memory      *int32                     `json:"memory,omitempty"`
	Name        *string                    `json:"name,omitempty"`
	OsType      *string                    `json:"os_type,omitempty"`
	VMDirectory *string                    `json:"vm_directory,omitempty"`
	Graphics    *CreationGraphicSerializer `json:"graphics,omitempty"`
}

// CredentialCreateResponse ...
type CredentialCreateResponse struct {
	Data      *CredentialSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// CredentialDestroyResponse ...
type CredentialDestroyResponse struct {
	Data      *string `json:"data,omitempty"`
	Status    *int32  `json:"status,omitempty"`
	Traceback *string `json:"traceback,omitempty"`
}

// CredentialListResponse ...
type CredentialListResponse struct {
	Data      *[]CredentialSerializer `json:"data,omitempty"`
	Status    *int32                  `json:"status,omitempty"`
	Traceback *string                 `json:"traceback,omitempty"`
}

// CredentialPartialUpdateResponse ...
type CredentialPartialUpdateResponse struct {
	Data      *CredentialSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// CredentialRetrieveResponse ...
type CredentialRetrieveResponse struct {
	Data      *CredentialSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// CredentialSerializer ...
type CredentialSerializer struct {
	CreationLocaltime *date.Time `json:"creation_localtime,omitempty"`
	Description       *string    `json:"description,omitempty"`
	Hostname          *string    `json:"hostname,omitempty"`
	ID                *int32     `json:"id,omitempty"`
	Name              *string    `json:"name,omitempty"`
	Port              *int32     `json:"port,omitempty"`
	Protocol          *string    `json:"protocol,omitempty"`
	Username          *string    `json:"username,omitempty"`
}

// CredentialTestConneticonResponse ...
type CredentialTestConneticonResponse struct {
	Data      *[]interface{} `json:"data,omitempty"`
	Status    *int32         `json:"status,omitempty"`
	Traceback *string        `json:"traceback,omitempty"`
}

// CredentialTestResponse ...
type CredentialTestResponse struct {
	Data      *[]interface{} `json:"data,omitempty"`
	Status    *int32         `json:"status,omitempty"`
	Traceback *string        `json:"traceback,omitempty"`
}

// DELETEUserVMPermissionResponse ...
type DELETEUserVMPermissionResponse struct {
	Status    *int32  `json:"status,omitempty"`
	Traceback *string `json:"traceback,omitempty"`
}

// Data ...
type Data struct {
	SyncTime     *bool `json:"sync_time,omitempty"`
	Overcommited *bool `json:"overcommited,omitempty"`
}

// DeprecatedTasksGetResponse ...
type DeprecatedTasksGetResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// DestroyResponse ...
type DestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// DiskCreateResponse ...
type DiskCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *DiskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
	Traceback         *string         `json:"traceback,omitempty"`
}

// DiskDestroyResponse ...
type DiskDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
	Traceback         *string `json:"traceback,omitempty"`
}

// DiskListResponse ...
type DiskListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]DiskSerializer `json:"data,omitempty"`
	Status            *int32            `json:"status,omitempty"`
	Traceback         *string           `json:"traceback,omitempty"`
}

// DiskPartialUpdateResponse ...
type DiskPartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *DiskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
	Traceback         *string         `json:"traceback,omitempty"`
}

// DiskRetrieveResponse ...
type DiskRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *DiskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
	Traceback         *string         `json:"traceback,omitempty"`
}

// DiskSerializer ...
type DiskSerializer struct {
	ActualSize *int64  `json:"actual_size,omitempty"`
	BootOrder  *int32  `json:"boot_order,omitempty"`
	Bus        *string `json:"bus,omitempty"`
	Cache      *string `json:"cache,omitempty"`
	Dev        *string `json:"dev,omitempty"`
	Format     *string `json:"format,omitempty"`
	ID         *int32  `json:"id,omitempty"`
	Index      *int32  `json:"index,omitempty"`
	IsDom      *bool   `json:"is_dom,omitempty"`
	Path       *string `json:"path,omitempty"`
	PathExist  *bool   `json:"path_exist,omitempty"`
	RootPath   *string `json:"root_path,omitempty"`
	Size       *int64  `json:"size,omitempty"`
	VMID       *int32  `json:"vm_id,omitempty"`
}

// DownloadVMLogSerializer ...
type DownloadVMLogSerializer struct {
	DownloadPath *string    `json:"download_path,omitempty"`
	FileName     *string    `json:"file_name,omitempty"`
	ID           *int32     `json:"id,omitempty"`
	Localtime    *date.Time `json:"localtime,omitempty"`
	Status       *string    `json:"status,omitempty"`
}

// ExportResponse ...
type ExportResponse struct {
	autorest.Response `json:"-"`
	Data              *TaskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
}

// ForceshutdownResponse ...
type ForceshutdownResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// GETUserVMPermissionResponse ...
type GETUserVMPermissionResponse struct {
	Data      *PermissionSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// GPUDestroyResponse ...
type GPUDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// GenerateMacResponse ...
type GenerateMacResponse struct {
	autorest.Response `json:"-"`
	// Data - An array of MAC strings 00:00:00:00:00:00
	Data   *[]string `json:"data,omitempty"`
	Status *int32    `json:"status,omitempty"`
}

// GetBackupInfoPostResponse ...
type GetBackupInfoPostResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// GetExternalPortsGetResponse ...
type GetExternalPortsGetResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// GetInternalPortsGetResponse ...
type GetInternalPortsGetResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// GetStatusGetResponse ...
type GetStatusGetResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// GpuResponse ...
type GpuResponse struct {
	autorest.Response `json:"-"`
	Data              *PCISerializer `json:"data,omitempty"`
	Status            *int32         `json:"status,omitempty"`
}

// GraphicCreateResponse ...
type GraphicCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *GraphicSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// GraphicDestroyResponse ...
type GraphicDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
	Traceback         *string `json:"traceback,omitempty"`
}

// GraphicListResponse ...
type GraphicListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]GraphicSerializer `json:"data,omitempty"`
	Status            *int32               `json:"status,omitempty"`
	Traceback         *string              `json:"traceback,omitempty"`
}

// GraphicPartialUpdateResponse ...
type GraphicPartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *GraphicSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// GraphicRetrieveResponse ...
type GraphicRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *GraphicSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
	Traceback         *string            `json:"traceback,omitempty"`
}

// GraphicSerializer ...
type GraphicSerializer struct {
	AutoPort       *bool   `json:"auto_port,omitempty"`
	EnablePassword *bool   `json:"enable_password,omitempty"`
	ID             *int32  `json:"id,omitempty"`
	LocalhostOnly  *bool   `json:"localhost_only,omitempty"`
	Port           *int32  `json:"port,omitempty"`
	Type           *string `json:"type,omitempty"`
	VMID           *int32  `json:"vm_id,omitempty"`
}

// IPListResponse ...
type IPListResponse struct {
	Data      *[]IPSerializer `json:"data,omitempty"`
	Status    *int32          `json:"status,omitempty"`
	Traceback *string         `json:"traceback,omitempty"`
}

// IPSerializer ...
type IPSerializer struct {
	DdnsIPList       *string `json:"ddns_ip_list,omitempty"`
	DefaultGatewayIP *string `json:"default_gateway_ip,omitempty"`
	ExternalIPList   *string `json:"external_ip_list,omitempty"`
	InternalIPList   *string `json:"internal_ip_list,omitempty"`
	MyqcloudIP       *string `json:"myqcloud_ip,omitempty"`
}

// ISOEdition ...
type ISOEdition struct {
	DisplayName *string `json:"display_name,omitempty"`
	Name        *string `json:"name,omitempty"`
	Language    *string `json:"language,omitempty"`
}

// ImageConvertResponse ...
type ImageConvertResponse struct {
	Data      *ConversionSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// Import ...
type Import struct {
	// VMDirectory - Where to instanciate the new VM
	VMDirectory *string `json:"vmDirectory,omitempty"`
	// FilePath - For import from PC
	FilePath *string `json:"file_path,omitempty"`
	// FileDirectory - fileDirectory combined with the file_path specify the complete path to the VM import file
	FileDirectory *string `json:"fileDirectory,omitempty"`
	// ImportType - Possible values include: 'ImportType1PC', 'ImportType1Local', 'ImportType1Remote'
	ImportType ImportType1        `json:"importType,omitempty"`
	RemoteNAS  *RemoteNAS         `json:"remoteNAS,omitempty"`
	Size       *float64           `json:"size,omitempty"`
	VM         *WriteVMSerializer `json:"vm,omitempty"`
}

// ImportCheckResponse ...
type ImportCheckResponse struct {
	autorest.Response `json:"-"`
	Data              *ConversionSerializer `json:"data,omitempty"`
	Status            *int32                `json:"status,omitempty"`
	Traceback         *string               `json:"traceback,omitempty"`
}

// ImportCheckResponseType ...
type ImportCheckResponseType struct {
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

// ImportConfigRequest ...
type ImportConfigRequest struct {
	// ImportType - Possible values include: 'PC', 'Local', 'Remote'
	ImportType         ImportType `json:"importType,omitempty"`
	FileDirectory      *string    `json:"fileDirectory,omitempty"`
	TemporaryDirectory *string    `json:"temporaryDirectory,omitempty"`
	RemoteNAS          *RemoteNAS `json:"remoteNAS,omitempty"`
}

// ImportConfigResponse ...
type ImportConfigResponse struct {
	autorest.Response `json:"-"`
	Message           *string `json:"message,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// ImportDownloadResponse ...
type ImportDownloadResponse struct {
	autorest.Response `json:"-"`
	Message           *string `json:"message,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// ImportDownloadResumeResponse ...
type ImportDownloadResumeResponse struct {
	autorest.Response `json:"-"`
	Message           *string `json:"message,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// ImportVMResponse ...
type ImportVMResponse struct {
	autorest.Response `json:"-"`
	Message           *string `json:"message,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// IpsResponse ...
type IpsResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// ListBackupsPostResponse ...
type ListBackupsPostResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// ListResponse ...
type ListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]Serializer `json:"data,omitempty"`
	Status            *int32        `json:"status,omitempty"`
}

// LogDeleteAllResponse ...
type LogDeleteAllResponse struct {
	Status    *int32  `json:"status,omitempty"`
	Traceback *string `json:"traceback,omitempty"`
}

// LogDeleteDownloadVMResponse ...
type LogDeleteDownloadVMResponse struct {
	Status    *int32  `json:"status,omitempty"`
	Traceback *string `json:"traceback,omitempty"`
}

// LogDownloadExportFileResponse ...
type LogDownloadExportFileResponse struct {
	Status    *int32  `json:"status,omitempty"`
	Traceback *string `json:"traceback,omitempty"`
}

// LogDownloadVMInfoResponse ...
type LogDownloadVMInfoResponse struct {
	Data      *[]DownloadVMLogSerializer `json:"data,omitempty"`
	Status    *int32                     `json:"status,omitempty"`
	Traceback *string                    `json:"traceback,omitempty"`
}

// LogListResponse ...
type LogListResponse struct {
	Data      *[]LogSerializer `json:"data,omitempty"`
	Status    *int32           `json:"status,omitempty"`
	Traceback *string          `json:"traceback,omitempty"`
}

// LogListUserCurrentLogsResponse ...
type LogListUserCurrentLogsResponse struct {
	Data      *[]LogSerializer `json:"data,omitempty"`
	Status    *int32           `json:"status,omitempty"`
	Traceback *string          `json:"traceback,omitempty"`
}

// LogSaveResponse ...
type LogSaveResponse struct {
	Data      *[]LogSerializer `json:"data,omitempty"`
	Status    *int32           `json:"status,omitempty"`
	Traceback *string          `json:"traceback,omitempty"`
}

// LogSerializer ...
type LogSerializer struct {
	Data         *string    `json:"data,omitempty"`
	ErrorMessage *string    `json:"error_message,omitempty"`
	File         *string    `json:"file,omitempty"`
	ID           *int32     `json:"id,omitempty"`
	Localtime    *date.Time `json:"localtime,omitempty"`
	Message      *string    `json:"message,omitempty"`
	Severity     *string    `json:"severity,omitempty"`
	UserID       *int32     `json:"user_id,omitempty"`
	Username     *string    `json:"username,omitempty"`
	VMID         *int32     `json:"vm_id,omitempty"`
	VMName       *string    `json:"vm_name,omitempty"`
}

// MassStorageControllerListResponse ...
type MassStorageControllerListResponse struct {
	Data      *[]MassStorageControllerSerializer `json:"data,omitempty"`
	Status    *int32                             `json:"status,omitempty"`
	Traceback *string                            `json:"traceback,omitempty"`
}

// MassStorageControllerSerializer ...
type MassStorageControllerSerializer struct {
	DeviceName       *string `json:"device_name,omitempty"`
	Exists           *bool   `json:"exists,omitempty"`
	GroupID          *string `json:"group_id,omitempty"`
	ID               *int32  `json:"id,omitempty"`
	IommuGroup       *int32  `json:"iommu_group,omitempty"`
	IsReservedForQVS *bool   `json:"is_reserved_for_QVS,omitempty"`
	SlotID           *string `json:"slot_id,omitempty"`
	SlotName         *string `json:"slot_name,omitempty"`
	SubtypeName      *string `json:"subtype_name,omitempty"`
	TypeName         *string `json:"type_name,omitempty"`
	VendorName       *string `json:"vendor_name,omitempty"`
	VMID             *string `json:"vm_id,omitempty"`
}

// NewsAddNewsStatusResponse ...
type NewsAddNewsStatusResponse struct {
	Data      *[]interface{} `json:"data,omitempty"`
	Status    *int32         `json:"status,omitempty"`
	Traceback *string        `json:"traceback,omitempty"`
}

// NewsDeleteNewsStatusResponse ...
type NewsDeleteNewsStatusResponse struct {
	Data      *[]interface{} `json:"data,omitempty"`
	Status    *int32         `json:"status,omitempty"`
	Traceback *string        `json:"traceback,omitempty"`
}

// NewsGetNewsStatusResponse ...
type NewsGetNewsStatusResponse struct {
	Data      *[][]interface{} `json:"data,omitempty"`
	Status    *int32           `json:"status,omitempty"`
	Traceback *string          `json:"traceback,omitempty"`
}

// NewsListResponse ...
type NewsListResponse struct {
	Data      *[][]interface{} `json:"data,omitempty"`
	Status    *int32           `json:"status,omitempty"`
	Traceback *string          `json:"traceback,omitempty"`
}

// PATCHUserVMPermissionResponse ...
type PATCHUserVMPermissionResponse struct {
	Data      *PermissionSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// PCIGroupCreateResponse ...
type PCIGroupCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *PCIGroupSerializer `json:"data,omitempty"`
	Status            *int32              `json:"status,omitempty"`
}

// PCIGroupDestroyResponse ...
type PCIGroupDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *int32 `json:"data,omitempty"`
	Status            *int32 `json:"status,omitempty"`
}

// PCIGroupSerializer ...
type PCIGroupSerializer struct {
	ID         *int32           `json:"id,omitempty"`
	Bridge     *string          `json:"bridge,omitempty"`
	IommuGroup *int32           `json:"iommu_group,omitempty"`
	Pcis       *[]PCISerializer `json:"pcis,omitempty"`
	Slot       *int32           `json:"slot,omitempty"`
}

// PCIListResponse ...
type PCIListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]PCISerializer `json:"data,omitempty"`
	Status            *int32           `json:"status,omitempty"`
}

// PCIRetrieveResponse ...
type PCIRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *PCISerializer `json:"data,omitempty"`
	Status            *int32         `json:"status,omitempty"`
}

// PCISerializer ...
type PCISerializer struct {
	DeviceName       *string `json:"device_name,omitempty"`
	Exists           *bool   `json:"exists,omitempty"`
	GroupID          *string `json:"group_id,omitempty"`
	ID               *int32  `json:"id,omitempty"`
	IommuGroup       *int32  `json:"iommu_group,omitempty"`
	IsReservedForQVS *bool   `json:"is_reserved_for_QVS,omitempty"`
	SlotID           *string `json:"slot_id,omitempty"`
	SlotName         *string `json:"slot_name,omitempty"`
	TypeName         *string `json:"type_name,omitempty"`
	VendorName       *string `json:"vendor_name,omitempty"`
	VMID             *string `json:"vm_id,omitempty"`
}

// POSTUserVMPermissionResponse ...
type POSTUserVMPermissionResponse struct {
	Data      *PermissionSerializer `json:"data,omitempty"`
	Status    *int32                `json:"status,omitempty"`
	Traceback *string               `json:"traceback,omitempty"`
}

// PartialUpdateResponse ...
type PartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *Serializer `json:"data,omitempty"`
	Status            *int32      `json:"status,omitempty"`
}

// PermissionListResponse ...
type PermissionListResponse struct {
	Data   *[]PermissionSerializer `json:"data,omitempty"`
	Status *int32                  `json:"status,omitempty"`
}

// PermissionSerializer ...
type PermissionSerializer struct {
	ID          *int32  `json:"id,omitempty"`
	Permissions *string `json:"permissions,omitempty"`
	UserID      *int32  `json:"user_id,omitempty"`
	VMID        *int32  `json:"vm_id,omitempty"`
}

// PortCreateResponse ...
type PortCreateResponse struct {
	Data      *PortSerializer `json:"data,omitempty"`
	Status    *int32          `json:"status,omitempty"`
	Traceback *string         `json:"traceback,omitempty"`
}

// PortListResponse ...
type PortListResponse struct {
	Data      *[]PortSerializer `json:"data,omitempty"`
	Status    *int32            `json:"status,omitempty"`
	Traceback *string           `json:"traceback,omitempty"`
}

// PortSerializer ...
type PortSerializer struct {
	HTTP  *int32 `json:"http,omitempty"`
	HTTPS *int32 `json:"https,omitempty"`
}

// QVSResponse ...
type QVSResponse struct {
	Status *int32      `json:"status,omitempty"`
	Data   interface{} `json:"data,omitempty"`
	// Traceback - Contains the eception stack trace, if running in DEBUG mode
	Traceback *string `json:"traceback,omitempty"`
}

// RemoteNAS ...
type RemoteNAS struct {
	Cid        *string             `json:"cid,omitempty"`
	RemotePath *string             `json:"remotePath,omitempty"`
	RemoteNAS  *RemoteNASRemoteNAS `json:"remoteNAS,omitempty"`
}

// RemoteNASRemoteNAS ...
type RemoteNASRemoteNAS struct {
	IPAddress *string `json:"ipAddress,omitempty"`
	Username  *string `json:"username,omitempty"`
	Password  *string `json:"password,omitempty"`
	Port      *int32  `json:"port,omitempty"`
	// Protocol - Possible values include: 'QtsHTTP', 'QtsHTTPS'
	Protocol Protocol `json:"protocol,omitempty"`
}

// RequirementsSerializer ...
type RequirementsSerializer struct {
	Cores  *int32 `json:"cores,omitempty"`
	Memory *int64 `json:"memory,omitempty"`
	Nics   *int32 `json:"nics,omitempty"`
}

// ReservedMemoryCreateResponse ...
type ReservedMemoryCreateResponse struct {
	Data   *[]interface{} `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// ReservedMemoryListResponse ...
type ReservedMemoryListResponse struct {
	Data   *string `json:"data,omitempty"`
	Status *int32  `json:"status,omitempty"`
}

// ResetResponse ...
type ResetResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// RestorePostResponse ...
type RestorePostResponse struct {
	Data   *[]BackupInfoSerializer `json:"data,omitempty"`
	Status *int32                  `json:"status,omitempty"`
}

// ResumeResponse ...
type ResumeResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// RetrieveResponse ...
type RetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *Serializer `json:"data,omitempty"`
	Status            *int32      `json:"status,omitempty"`
}

// SATAControllerListResponse ...
type SATAControllerListResponse struct {
	Data   *[]SATAControllerSerializer `json:"data,omitempty"`
	Status *int32                      `json:"status,omitempty"`
}

// SATAControllerSerializer ...
type SATAControllerSerializer struct {
	DeviceName       *string `json:"device_name,omitempty"`
	Exists           *bool   `json:"exists,omitempty"`
	GroupID          *string `json:"group_id,omitempty"`
	ID               *int32  `json:"id,omitempty"`
	IommuGroup       *int32  `json:"iommu_group,omitempty"`
	IsReservedForQVS *bool   `json:"is_reserved_for_QVS,omitempty"`
	SlotID           *string `json:"slot_id,omitempty"`
	SlotName         *string `json:"slot_name,omitempty"`
	SubtypeName      *string `json:"subtype_name,omitempty"`
	TypeName         *string `json:"type_name,omitempty"`
	VendorName       *string `json:"vendor_name,omitempty"`
	VMID             *string `json:"vm_id,omitempty"`
}

// SchedulePartialUpdateResponse ...
type SchedulePartialUpdateResponse struct {
	Data   *ScheduleSerializer `json:"data,omitempty"`
	Status *int32              `json:"status,omitempty"`
}

// ScheduleSerializer ...
type ScheduleSerializer struct {
	ID        *int32    `json:"id,omitempty"`
	Frequency *string   `json:"frequency,omitempty"`
	Interval  *int32    `json:"interval,omitempty"`
	Days      *[]string `json:"days,omitempty"`
	Hour      *int32    `json:"hour,omitempty"`
	Minute    *int32    `json:"minute,omitempty"`
	Enable    *bool     `json:"enable,omitempty"`
	TaskType  *string   `json:"task_type,omitempty"`
	JobID     *int32    `json:"job_id,omitempty"`
}

// ScheduleSnapshotCreateResponse ...
type ScheduleSnapshotCreateResponse struct {
	Data   *ScheduleSnapshotSerializer `json:"data,omitempty"`
	Status *int32                      `json:"status,omitempty"`
}

// ScheduleSnapshotPartialUpdateResponse ...
type ScheduleSnapshotPartialUpdateResponse struct {
	Data   *ScheduleSnapshotSerializer `json:"data,omitempty"`
	Status *int32                      `json:"status,omitempty"`
}

// ScheduleSnapshotRetrieveResponse ...
type ScheduleSnapshotRetrieveResponse struct {
	Data   *Serializer `json:"data,omitempty"`
	Status *int32      `json:"status,omitempty"`
}

// ScheduleSnapshotSerializer ...
type ScheduleSnapshotSerializer struct {
	ID            *int32              `json:"id,omitempty"`
	VMID          *int32              `json:"vm_id,omitempty"`
	UserID        *int32              `json:"user_id,omitempty"`
	Name          *string             `json:"name,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Schedule      *ScheduleSerializer `json:"schedule,omitempty"`
	NextTime      *date.Time          `json:"next_time,omitempty"`
	RemainingTime *int64              `json:"remaining_time,omitempty"`
}

// SerialPortCreateResponse ...
type SerialPortCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *SerialPortSerializerType `json:"data,omitempty"`
	Status            *int32                    `json:"status,omitempty"`
}

// SerialPortDestroyResponse ...
type SerialPortDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// SerialPortListResponse ...
type SerialPortListResponse struct {
	Data   *[]SerialPortSerializer `json:"data,omitempty"`
	Status *int32                  `json:"status,omitempty"`
}

// SerialPortListResponseType ...
type SerialPortListResponseType struct {
	autorest.Response `json:"-"`
	Data              *[]SerialPortSerializer `json:"data,omitempty"`
	Status            *int32                  `json:"status,omitempty"`
}

// SerialPortRetrieveResponse ...
type SerialPortRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *SerialPortSerializer `json:"data,omitempty"`
	Status            *int32                `json:"status,omitempty"`
}

// SerialPortSerializer ...
type SerialPortSerializer struct {
	ID           *int32  `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	SerialportID *int32  `json:"serialport_id,omitempty"`
	Type         *string `json:"type,omitempty"`
	VMID         *string `json:"vm_id,omitempty"`
}

// SerialPortSerializerType ...
type SerialPortSerializerType struct {
	ID           *int32  `json:"id,omitempty"`
	SerialportID *int32  `json:"serialport_id,omitempty"`
	VMID         *int32  `json:"vm_id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// Serializer ...
type Serializer struct {
	ActiveSnapshotID            *int32                      `json:"active_snapshot_id,omitempty"`
	Adapters                    *[]AdapterSerializer        `json:"adapters,omitempty"`
	AppStates                   *[]string                   `json:"app_states,omitempty"`
	Arch                        *string                     `json:"arch,omitempty"`
	AutoStart                   *string                     `json:"auto_start,omitempty"`
	AutoStartDelay              *int32                      `json:"auto_start_delay,omitempty"`
	Ballooning                  *int32                      `json:"ballooning,omitempty"`
	BallooningRsvd              *int64                      `json:"ballooning_rsvd,omitempty"`
	Bios                        *string                     `json:"bios,omitempty"`
	BootOrder                   *string                     `json:"boot_order,omitempty"`
	Cdroms                      *[]CDROMSerializer          `json:"cdroms,omitempty"`
	Cores                       *int32                      `json:"cores,omitempty"`
	CPUModel                    *string                     `json:"cpu_model,omitempty"`
	DefaultFolder               *string                     `json:"default_folder,omitempty"`
	Description                 *string                     `json:"description,omitempty"`
	Disks                       *[]DiskSerializer           `json:"disks,omitempty"`
	Gpus                        *[]PCISerializer            `json:"gpus,omitempty"`
	Graphics                    *[]GraphicSerializer        `json:"graphics,omitempty"`
	HasGpuDevice                *bool                       `json:"has_gpu_device,omitempty"`
	HasPciPtDevice              *bool                       `json:"has_pci_pt_device,omitempty"`
	HasSataController           *bool                       `json:"has_sata_controller,omitempty"`
	HideKvmSign                 *bool                       `json:"hide_kvm_sign,omitempty"`
	HotPlugCPU                  *bool                       `json:"hot_plug_cpu,omitempty"`
	ID                          *int32                      `json:"id,omitempty"`
	IsAgentEnabled              *bool                       `json:"is_agent_enabled,omitempty"`
	IsQemuAgentChannelConnected *bool                       `json:"is_qemu_agent_channel_connected,omitempty"`
	IsVa                        *bool                       `json:"is_va,omitempty"`
	Keymap                      *string                     `json:"keymap,omitempty"`
	Memory                      *int64                      `json:"memory,omitempty"`
	MemorySharing               *bool                       `json:"memory_sharing,omitempty"`
	Name                        *string                     `json:"name,omitempty"`
	OsType                      *string                     `json:"os_type,omitempty"`
	Pcis                        *[]PCISerializer            `json:"pcis,omitempty"`
	PowerState                  *string                     `json:"power_state,omitempty"`
	Qvm                         *bool                       `json:"qvm,omitempty"`
	SataControllers             *[]SATAControllerSerializer `json:"sata_controllers,omitempty"`
	Serialports                 *[]SerialPortSerializer     `json:"serialports,omitempty"`
	SnapshotType                *string                     `json:"snapshot_type,omitempty"`
	Sound                       *string                     `json:"sound,omitempty"`
	Source                      *string                     `json:"source,omitempty"`
	Usb                         *string                     `json:"usb,omitempty"`
	Usbs                        *[]USBSerializer            `json:"usbs,omitempty"`
	UUID                        *string                     `json:"uuid,omitempty"`
	Vfs                         *[]VFSerializer             `json:"vfs,omitempty"`
	VideoType                   *string                     `json:"video_type,omitempty"`
}

// SetObject ...
type SetObject struct {
	autorest.Response `json:"-"`
	Value             interface{} `json:"value,omitempty"`
}

// ShareLinkCreateResponse ...
type ShareLinkCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *SharelinkSerializer `json:"data,omitempty"`
	Status            *int32               `json:"status,omitempty"`
}

// ShareLinkDestroyResponse ...
type ShareLinkDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// ShareLinkListResponse ...
type ShareLinkListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]SharelinkSerializer `json:"data,omitempty"`
	Status            *int32                 `json:"status,omitempty"`
}

// ShareLinkListResponseType ...
type ShareLinkListResponseType struct {
	Data   *[][]interface{} `json:"data,omitempty"`
	Status *int32           `json:"status,omitempty"`
}

// ShareLinkPartialUpdateResponse ...
type ShareLinkPartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *SharelinkSerializer `json:"data,omitempty"`
	Status            *int32               `json:"status,omitempty"`
}

// ShareLinkRetrieveResponse ...
type ShareLinkRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *SharelinkSerializer `json:"data,omitempty"`
	Status            *int32               `json:"status,omitempty"`
}

// SharelinkSerializer ...
type SharelinkSerializer struct {
	// EndLocaltime - The End Local Time of VM Share Link
	EndLocaltime *date.Time `json:"end_localtime,omitempty"`
	// EndTime - The End Time of VM Share Link
	EndTime *date.Time `json:"end_time,omitempty"`
	ID      *int32     `json:"id,omitempty"`
	// Sid - The VM Share Link ID
	Sid *string `json:"sid,omitempty"`
	// StartTime - The Start Time of VM Share Link
	StartTime *date.Time `json:"start_time,omitempty"`
	// ValidTime - The VM Share Link Is Effective or Not
	ValidTime *bool `json:"valid_time,omitempty"`
	// VMID - The VM ID
	VMID *int32 `json:"vm_id,omitempty"`
}

// ShutdownResponse ...
type ShutdownResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// SnapshotCreateResponse ...
type SnapshotCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *SnapshotSerializer `json:"data,omitempty"`
	Status            *int32              `json:"status,omitempty"`
}

// SnapshotDestroyResponse ...
type SnapshotDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// SnapshotListResponse ...
type SnapshotListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]SnapshotSerializer `json:"data,omitempty"`
	Status            *int32                `json:"status,omitempty"`
}

// SnapshotRetrieveResponse ...
type SnapshotRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *SnapshotSerializer `json:"data,omitempty"`
	Status            *int32              `json:"status,omitempty"`
}

// SnapshotSerializer ...
type SnapshotSerializer struct {
	AppStates         *[]string  `json:"app_states,omitempty"`
	CreatedBy         *string    `json:"created_by,omitempty"`
	CreationLocaltime *date.Time `json:"creation_localtime,omitempty"`
	CreationTime      *date.Time `json:"creation_time,omitempty"`
	Description       *string    `json:"description,omitempty"`
	ID                *int32     `json:"id,omitempty"`
	LockSnapshot      *string    `json:"lock_snapshot,omitempty"`
	Name              *string    `json:"name,omitempty"`
	VMID              *int32     `json:"vm_id,omitempty"`
}

// StartResponse ...
type StartResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// StateSerializer ...
type StateSerializer struct {
	AppStates  *[]string `json:"app_states,omitempty"`
	ID         *int32    `json:"id,omitempty"`
	Name       *string   `json:"name,omitempty"`
	PowerState *string   `json:"power_state,omitempty"`
}

// StatesResponse ...
type StatesResponse struct {
	autorest.Response `json:"-"`
	Data              *[]StateSerializer `json:"data,omitempty"`
	Status            *int32             `json:"status,omitempty"`
}

// StoppingProgressResponse ...
type StoppingProgressResponse struct {
	autorest.Response `json:"-"`
	Data              *StoppingProgressResponseData `json:"data,omitempty"`
	Status            *int32                        `json:"status,omitempty"`
}

// StoppingProgressResponseData ...
type StoppingProgressResponseData struct {
	StoppingProgress *float64                               `json:"stopping_progress,omitempty"`
	VmsProperty      *[]StoppingProgressResponseDataVmsItem `json:"vms,omitempty"`
	AllVMNum         *int32                                 `json:"all_vm_num,omitempty"`
}

// StoppingProgressResponseDataVmsItem ...
type StoppingProgressResponseDataVmsItem struct {
	Name       *string `json:"name,omitempty"`
	PowerState *string `json:"power_state,omitempty"`
}

// SuspendResponse ...
type SuspendResponse struct {
	autorest.Response `json:"-"`
	Status            *int32 `json:"status,omitempty"`
}

// SyncResponse ...
type SyncResponse struct {
	autorest.Response `json:"-"`
	Data              *Serializer `json:"data,omitempty"`
	Status            *int32      `json:"status,omitempty"`
}

// TaskDestroyResponse ...
type TaskDestroyResponse struct {
	Status *int32 `json:"status,omitempty"`
}

// TaskSerializer ...
type TaskSerializer struct {
	ID       *int32             `json:"id,omitempty"`
	User     *string            `json:"user,omitempty"`
	Title    *string            `json:"title,omitempty"`
	Data     map[string]*string `json:"data"`
	State    *string            `json:"state,omitempty"`
	Progress *float64           `json:"progress,omitempty"`
	Type     *string            `json:"type,omitempty"`
	Features *[]string          `json:"features,omitempty"`
}

// MarshalJSON is the custom marshaler for TaskSerializer.
func (ts TaskSerializer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if ts.ID != nil {
		objectMap["id"] = ts.ID
	}
	if ts.User != nil {
		objectMap["user"] = ts.User
	}
	if ts.Title != nil {
		objectMap["title"] = ts.Title
	}
	if ts.Data != nil {
		objectMap["data"] = ts.Data
	}
	if ts.State != nil {
		objectMap["state"] = ts.State
	}
	if ts.Progress != nil {
		objectMap["progress"] = ts.Progress
	}
	if ts.Type != nil {
		objectMap["type"] = ts.Type
	}
	if ts.Features != nil {
		objectMap["features"] = ts.Features
	}
	return json.Marshal(objectMap)
}

// TemporaryCredentialSerializer ...
type TemporaryCredentialSerializer struct {
	Hostname *string `json:"hostname,omitempty"`
	ID       *int32  `json:"id,omitempty"`
	Port     *int32  `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	Username *string `json:"username,omitempty"`
}

// USBCreateResponse ...
type USBCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *USBSerializer `json:"data,omitempty"`
	Status            *int32         `json:"status,omitempty"`
}

// USBDestroyResponse ...
type USBDestroyResponse struct {
	autorest.Response `json:"-"`
	Data              *string `json:"data,omitempty"`
	Status            *int32  `json:"status,omitempty"`
}

// USBListResponse ...
type USBListResponse struct {
	autorest.Response `json:"-"`
	Data              *[]USBSerializer `json:"data,omitempty"`
	Status            *int32           `json:"status,omitempty"`
}

// USBPartialUpdateResponse ...
type USBPartialUpdateResponse struct {
	autorest.Response `json:"-"`
	Data              *USBSerializer `json:"data,omitempty"`
	Status            *int32         `json:"status,omitempty"`
}

// USBRetrieveResponse ...
type USBRetrieveResponse struct {
	autorest.Response `json:"-"`
	Data              *USBSerializer `json:"data,omitempty"`
	Status            *int32         `json:"status,omitempty"`
}

// USBSerializer ...
type USBSerializer struct {
	BootOrder    *int32  `json:"boot_order,omitempty"`
	BusNum       *int32  `json:"bus_num,omitempty"`
	DevNum       *int32  `json:"dev_num,omitempty"`
	ID           *int32  `json:"id,omitempty"`
	Index        *int32  `json:"index,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Product      *string `json:"product,omitempty"`
	ProductID    *string `json:"product_id,omitempty"`
	Type         *string `json:"type,omitempty"`
	VendorID     *string `json:"vendor_id,omitempty"`
	Version      *string `json:"version,omitempty"`
	VMID         *int32  `json:"vm_id,omitempty"`
}

// UserCreateResponse ...
type UserCreateResponse struct {
	Data   *UserSerializer `json:"data,omitempty"`
	Status *int32          `json:"status,omitempty"`
}

// UserDestroyResponse ...
type UserDestroyResponse struct {
	Status *int32 `json:"status,omitempty"`
}

// UserGetCurrentUserInfoResponse ...
type UserGetCurrentUserInfoResponse struct {
	Data   *UserSerializer `json:"data,omitempty"`
	Status *int32          `json:"status,omitempty"`
}

// UserListResponse ...
type UserListResponse struct {
	Data   *[]UserSerializer `json:"data,omitempty"`
	Status *int32            `json:"status,omitempty"`
}

// UserPartialUpdateResponse ...
type UserPartialUpdateResponse struct {
	Data   *UserSerializer `json:"data,omitempty"`
	Status *int32          `json:"status,omitempty"`
}

// UserRetrieveResponse ...
type UserRetrieveResponse struct {
	Data   *UserSerializer `json:"data,omitempty"`
	Status *int32          `json:"status,omitempty"`
}

// UserSerializer ...
type UserSerializer struct {
	ClearLogTimeLocaltime *date.Time `json:"clear_log_time_localtime,omitempty"`
	Description           *string    `json:"description,omitempty"`
	ID                    *int32     `json:"id,omitempty"`
	IsSuperuser           *bool      `json:"is_superuser,omitempty"`
	LastLoginLocaltime    *date.Time `json:"last_login_localtime,omitempty"`
	Username              *string    `json:"username,omitempty"`
}

// UserUpdateClearLogTimeResponse ...
type UserUpdateClearLogTimeResponse struct {
	Status *int32 `json:"status,omitempty"`
}

// VASerializer ...
type VASerializer struct {
	Description  *string                 `json:"description,omitempty"`
	DisplayName  *string                 `json:"display_name,omitempty"`
	Downloaded   *bool                   `json:"downloaded,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	OsType       *string                 `json:"os_type,omitempty"`
	Progress     *float64                `json:"progress,omitempty"`
	Requirements *RequirementsSerializer `json:"requirements,omitempty"`
}

// VFSerializer ...
type VFSerializer struct {
	ID    *int32  `json:"id,omitempty"`
	Index *int32  `json:"index,omitempty"`
	VMID  *int32  `json:"vm_id,omitempty"`
	Mac   *string `json:"mac,omitempty"`
}

// VNCTokenCreateResponse ...
type VNCTokenCreateResponse struct {
	autorest.Response `json:"-"`
	Data              *TaskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
}

// VNCTokenListResponse ...
type VNCTokenListResponse struct {
	autorest.Response `json:"-"`
	Data              *TaskSerializer `json:"data,omitempty"`
	Status            *int32          `json:"status,omitempty"`
}

// VirtualApplianceCreateResponse ...
type VirtualApplianceCreateResponse struct {
	Data   *CreationInfoSerializer `json:"data,omitempty"`
	Status *int32                  `json:"status,omitempty"`
}

// VirtualApplianceListResponse ...
type VirtualApplianceListResponse struct {
	Data   *[]VASerializer `json:"data,omitempty"`
	Status *int32          `json:"status,omitempty"`
}

// VirtualApplianceReloadResponse ...
type VirtualApplianceReloadResponse struct {
	Data   *[]QVSResponse `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// VirtualApplianceRepositoryResponse ...
type VirtualApplianceRepositoryResponse struct {
	Data   *[]QVSResponse `json:"data,omitempty"`
	Status *int32         `json:"status,omitempty"`
}

// VirtualApplianceRetrieveResponse ...
type VirtualApplianceRetrieveResponse struct {
	Data   *VASerializer `json:"data,omitempty"`
	Status *int32        `json:"status,omitempty"`
}

// VirtualQTSAdapterSerializer ...
type VirtualQTSAdapterSerializer struct {
	Bridge *string `json:"bridge,omitempty"`
	ID     *int32  `json:"id,omitempty"`
	Index  *int32  `json:"index,omitempty"`
	Mac    *string `json:"mac,omitempty"`
	Model  *string `json:"model,omitempty"`
	VMID   *int32  `json:"vm_id,omitempty"`
}

// VirtualQTSCreateResponse ...
type VirtualQTSCreateResponse struct {
	Data   *VirtualQTSVMSerializer `json:"data,omitempty"`
	Status *int32                  `json:"status,omitempty"`
}

// VirtualQTSDiskSerializer ...
type VirtualQTSDiskSerializer struct {
	Format    *string `json:"format,omitempty"`
	Bus       *string `json:"bus,omitempty"`
	Cache     *string `json:"cache,omitempty"`
	BootOrder *int32  `json:"boot_order,omitempty"`
	VMID      *int32  `json:"vm_id,omitempty"`
}

// VirtualQTSVMSerializer ...
type VirtualQTSVMSerializer struct {
	OsType          *string                        `json:"os_type,omitempty"`
	Arch            *string                        `json:"arch,omitempty"`
	BootOrder       *string                        `json:"boot_order,omitempty"`
	CPUModel        *string                        `json:"cpu_model,omitempty"`
	Keymap          *string                        `json:"keymap,omitempty"`
	Bios            *string                        `json:"bios,omitempty"`
	VideoType       *string                        `json:"video_type,omitempty"`
	Usb             *string                        `json:"usb,omitempty"`
	Qvm             *bool                          `json:"qvm,omitempty"`
	Test            *bool                          `json:"test,omitempty"`
	Sound           *string                        `json:"sound,omitempty"`
	Disks           *[]VirtualQTSDiskSerializer    `json:"disks,omitempty"`
	Cdroms          *[]CDROMSerializer             `json:"cdroms,omitempty"`
	Adapters        *[]VirtualQTSAdapterSerializer `json:"adapters,omitempty"`
	Graphics        *[]GraphicSerializer           `json:"graphics,omitempty"`
	Usbs            *[]USBSerializer               `json:"usbs,omitempty"`
	Pcis            *[]PCISerializer               `json:"pcis,omitempty"`
	Gpus            *[]PCISerializer               `json:"gpus,omitempty"`
	IsAgentEnabled  *bool                          `json:"is_agent_enabled,omitempty"`
	SataControllers *[]SATAControllerSerializer    `json:"sata_controllers,omitempty"`
	HideKvmSign     *bool                          `json:"hide_kvm_sign,omitempty"`
}

// WriteAdapterSerializer ...
type WriteAdapterSerializer struct {
	Bridge *string `json:"bridge,omitempty"`
	Mac    *string `json:"mac,omitempty"`
	Model  *string `json:"model,omitempty"`
	VMID   *int32  `json:"vm_id,omitempty"`
}

// WriteBackupInfoSerializer ...
type WriteBackupInfoSerializer struct {
	Data    *string `json:"data,omitempty"`
	Nas     *string `json:"nas,omitempty"`
	NasUUID *string `json:"nas_uuid,omitempty"`
	Size    *int64  `json:"size,omitempty"`
	Type    *string `json:"type,omitempty"`
	VMName  *string `json:"vm_name,omitempty"`
}

// WriteBackupScheduleSerializer ...
type WriteBackupScheduleSerializer struct {
	Days      *string `json:"days,omitempty"`
	Enable    *bool   `json:"enable,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	Hour      *int32  `json:"hour,omitempty"`
	Interval  *int32  `json:"interval,omitempty"`
	JobID     *int32  `json:"job_id,omitempty"`
	Minute    *int32  `json:"minute,omitempty"`
	TaskType  *string `json:"task_type,omitempty"`
}

// WriteBackupSerializer ...
type WriteBackupSerializer struct {
	Credential            *TemporaryCredentialSerializer `json:"credential,omitempty"`
	Description           *string                        `json:"description,omitempty"`
	ErrorMessage          *string                        `json:"error_message,omitempty"`
	LastFinishedLocaltime *date.Time                     `json:"last_finished_localtime,omitempty"`
	LastStartedLocaltime  *date.Time                     `json:"last_started_localtime,omitempty"`
	Name                  *string                        `json:"name,omitempty"`
	RestoreOnly           *bool                          `json:"restore_only,omitempty"`
	Retention             *int32                         `json:"retention,omitempty"`
	Schedule              *BackupScheduleSerializer      `json:"schedule,omitempty"`
	Strategy              *string                        `json:"strategy,omitempty"`
	TargetPath            *string                        `json:"target_path,omitempty"`
	TargetType            *string                        `json:"target_type,omitempty"`
	UserID                *string                        `json:"user_id,omitempty"`
	VMID                  *string                        `json:"vm_id,omitempty"`
}

// WriteCDROMSerializer ...
type WriteCDROMSerializer struct {
	BootOrder *int32  `json:"boot_order,omitempty"`
	Bus       *string `json:"bus,omitempty"`
	Path      *string `json:"path,omitempty"`
	VMID      *int32  `json:"vm_id,omitempty"`
}

// WriteCredentialSerializer ...
type WriteCredentialSerializer struct {
	Description *string `json:"description,omitempty"`
	Hostname    *string `json:"hostname,omitempty"`
	Name        *string `json:"name,omitempty"`
	Password    *string `json:"password,omitempty"`
	Port        *int32  `json:"port,omitempty"`
	Protocol    *string `json:"protocol,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// WriteDiskSerializer ...
type WriteDiskSerializer struct {
	BootOrder     *int32  `json:"boot_order,omitempty"`
	Bus           *string `json:"bus,omitempty"`
	Cache         *string `json:"cache,omitempty"`
	CreatingImage *bool   `json:"creating_image,omitempty"`
	Format        *string `json:"format,omitempty"`
	Path          *string `json:"path,omitempty"`
	Size          *int64  `json:"size,omitempty"`
	VMID          *int32  `json:"vm_id,omitempty"`
}

// WriteDownloadVMLogSerializer ...
type WriteDownloadVMLogSerializer struct {
	DownloadPath *string `json:"download_path,omitempty"`
}

// WriteGraphicSerializer ...
type WriteGraphicSerializer struct {
	AutoPort       *bool   `json:"auto_port,omitempty"`
	EnablePassword *bool   `json:"enable_password,omitempty"`
	LocalhostOnly  *bool   `json:"localhost_only,omitempty"`
	Password       *string `json:"password,omitempty"`
	Port           *int32  `json:"port,omitempty"`
	Type           *string `json:"type,omitempty"`
	VMID           *int32  `json:"vm_id,omitempty"`
}

// WriteIPSerializer ...
type WriteIPSerializer struct {
	DdnsIPList       *string `json:"ddns_ip_list,omitempty"`
	DefaultGatewayIP *string `json:"default_gateway_ip,omitempty"`
	ExternalIPList   *string `json:"external_ip_list,omitempty"`
	InternalIPList   *string `json:"internal_ip_list,omitempty"`
	MyqcloudIP       *string `json:"myqcloud_ip,omitempty"`
}

// WriteLogSerializer ...
type WriteLogSerializer struct {
	Data         *string `json:"data,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	File         *string `json:"file,omitempty"`
	Message      *string `json:"message,omitempty"`
	Severity     *string `json:"severity,omitempty"`
	Username     *string `json:"username,omitempty"`
	VMName       *string `json:"vm_name,omitempty"`
}

// WriteMassStorageControllerSerializer ...
type WriteMassStorageControllerSerializer struct {
	GroupID *string `json:"group_id,omitempty"`
	SlotID  *string `json:"slot_id,omitempty"`
	VMID    *string `json:"vm_id,omitempty"`
}

// WritePCISerializer ...
type WritePCISerializer struct {
	GroupID *string `json:"group_id,omitempty"`
	SlotID  *string `json:"slot_id,omitempty"`
	VMID    *string `json:"vm_id,omitempty"`
}

// WritePortSerializer ...
type WritePortSerializer struct {
	HTTP  *int32 `json:"http,omitempty"`
	HTTPS *int32 `json:"https,omitempty"`
}

// WriteRemoteNASSerializer ...
type WriteRemoteNASSerializer struct {
	Fw       *string `json:"fw,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
	IP       *string `json:"ip,omitempty"`
	Model    *string `json:"model,omitempty"`
	Port     *int32  `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
}

// WriteSATAControllerSerializer ...
type WriteSATAControllerSerializer struct {
	GroupID *string `json:"group_id,omitempty"`
	SlotID  *string `json:"slot_id,omitempty"`
	VMID    *string `json:"vm_id,omitempty"`
}

// WriteSerialPortSerializer ...
type WriteSerialPortSerializer struct {
	VMID *string `json:"vm_id,omitempty"`
}

// WriteSharelinkSerializer ...
type WriteSharelinkSerializer struct {
	// EndTime - The End Time of VM Share Link
	EndTime *date.Time `json:"end_time,omitempty"`
	// Sid - The VM Share Link ID
	Sid *string `json:"sid,omitempty"`
	// ValidTime - The VM Share Link Is Effective or Not
	ValidTime *bool `json:"valid_time,omitempty"`
	// VMID - The VM ID
	VMID *int32 `json:"vm_id,omitempty"`
}

// WriteSnapshotSerializer ...
type WriteSnapshotSerializer struct {
	CreatedBy    *string `json:"created_by,omitempty"`
	Description  *string `json:"description,omitempty"`
	LockSnapshot *string `json:"lock_snapshot,omitempty"`
	Name         *string `json:"name,omitempty"`
	VMID         *int32  `json:"vm_id,omitempty"`
}

// WriteTemporaryCredentialSerializer ...
type WriteTemporaryCredentialSerializer struct {
	Hostname *string `json:"hostname,omitempty"`
	ID       *int32  `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
	Port     *int32  `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WriteUSBSerializer ...
type WriteUSBSerializer struct {
	BootOrder *int32  `json:"boot_order,omitempty"`
	BusNum    *int32  `json:"bus_num,omitempty"`
	DevNum    *int32  `json:"dev_num,omitempty"`
	ProductID *string `json:"product_id,omitempty"`
	VendorID  *string `json:"vendor_id,omitempty"`
	VMID      *int32  `json:"vm_id,omitempty"`
}

// WriteUserSerializer ...
type WriteUserSerializer struct {
	Description *string `json:"description,omitempty"`
	IsSuperuser *bool   `json:"is_superuser,omitempty"`
	Password    *string `json:"password,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// WriteVMPermissionSerializer ...
type WriteVMPermissionSerializer struct {
	Permissions *string `json:"permissions,omitempty"`
	UserID      *int32  `json:"user_id,omitempty"`
	VMID        *int32  `json:"vm_id,omitempty"`
}

// WriteVMSerializer ...
type WriteVMSerializer struct {
	Adapters                    *[]AdapterSerializer        `json:"adapters,omitempty"`
	Arch                        *string                     `json:"arch,omitempty"`
	AutoStart                   *string                     `json:"auto_start,omitempty"`
	AutoStartDelay              *int32                      `json:"auto_start_delay,omitempty"`
	Bios                        *string                     `json:"bios,omitempty"`
	BootOrder                   *string                     `json:"boot_order,omitempty"`
	Cdroms                      *[]CDROMSerializer          `json:"cdroms,omitempty"`
	Cores                       *int32                      `json:"cores,omitempty"`
	CPUModel                    *string                     `json:"cpu_model,omitempty"`
	Description                 *string                     `json:"description,omitempty"`
	Disks                       *[]DiskSerializer           `json:"disks,omitempty"`
	Gpus                        *[]PCISerializer            `json:"gpus,omitempty"`
	Graphics                    *[]GraphicSerializer        `json:"graphics,omitempty"`
	HideKvmSign                 *bool                       `json:"hide_kvm_sign,omitempty"`
	IsAgentEnabled              *bool                       `json:"is_agent_enabled,omitempty"`
	IsQemuAgentChannelConnected *bool                       `json:"is_qemu_agent_channel_connected,omitempty"`
	Keymap                      *string                     `json:"keymap,omitempty"`
	Memory                      *int64                      `json:"memory,omitempty"`
	Name                        *string                     `json:"name,omitempty"`
	OsType                      *string                     `json:"os_type,omitempty"`
	Pcis                        *[]PCISerializer            `json:"pcis,omitempty"`
	Qvm                         *bool                       `json:"qvm,omitempty"`
	SataControllers             *[]SATAControllerSerializer `json:"sata_controllers,omitempty"`
	Serialports                 *[]interface{}              `json:"serialports,omitempty"`
	Sound                       *string                     `json:"sound,omitempty"`
	Source                      *string                     `json:"source,omitempty"`
	Test                        *bool                       `json:"test,omitempty"`
	Usb                         *string                     `json:"usb,omitempty"`
	Usbs                        *[]USBSerializer            `json:"usbs,omitempty"`
	VideoType                   *string                     `json:"video_type,omitempty"`
}

// WriteVMStateSerializer ...
type WriteVMStateSerializer struct {
	Name *string `json:"name,omitempty"`
}
