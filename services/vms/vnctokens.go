package vms

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// VNCTokensClient is the VM Client
type VNCTokensClient struct {
	BaseClient
}

// NewVNCTokensClient creates an instance of the VNCTokensClient client.
func NewVNCTokensClient() VNCTokensClient {
	return NewVNCTokensClientWithBaseURI(DefaultBaseURI)
}

// NewVNCTokensClientWithBaseURI creates an instance of the VNCTokensClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewVNCTokensClientWithBaseURI(baseURI string) VNCTokensClient {
	return VNCTokensClient{NewWithBaseURI(baseURI)}
}

// Create set VM VNC Token
// example:
// {"ip":"127.0.0.1","port":5900}
// Parameters:
// data - VM VNC Server IP and Port Number
func (client VNCTokensClient) Create(ctx context.Context, vmid int32, data string) (result VNCTokenCreateResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VNCTokensClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePreparer(ctx, vmid, data)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client VNCTokensClient) CreatePreparer(ctx context.Context, vmid int32, data string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/vnc_token", pathParameters))
	if len(data) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(data))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client VNCTokensClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client VNCTokensClient) CreateResponder(resp *http.Response) (result VNCTokenCreateResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetIPByAgent sends the get ip by agent request.
func (client VNCTokensClient) GetIPByAgent(ctx context.Context, vmid int32) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VNCTokensClient.GetIPByAgent")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetIPByAgentPreparer(ctx, vmid)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "GetIPByAgent", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetIPByAgentSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "GetIPByAgent", resp, "Failure sending request")
		return
	}

	result, err = client.GetIPByAgentResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "GetIPByAgent", resp, "Failure responding to request")
		return
	}

	return
}

// GetIPByAgentPreparer prepares the GetIPByAgent request.
func (client VNCTokensClient) GetIPByAgentPreparer(ctx context.Context, vmid int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/vnc_token/get_ip", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetIPByAgentSender sends the GetIPByAgent request. The method will close the
// http.Response Body if it receives an error.
func (client VNCTokensClient) GetIPByAgentSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetIPByAgentResponder handles the response to the GetIPByAgent request. The method always
// closes the http.Response Body.
func (client VNCTokensClient) GetIPByAgentResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List get VM VNC Token
func (client VNCTokensClient) List(ctx context.Context, vmid int32) (result VNCTokenListResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VNCTokensClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx, vmid)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.VNCTokensClient", "List", resp, "Failure responding to request")
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client VNCTokensClient) ListPreparer(ctx context.Context, vmid int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"vm_id": autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/vms/{vm_id}/vnc_token", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client VNCTokensClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client VNCTokensClient) ListResponder(resp *http.Response) (result VNCTokenListResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
