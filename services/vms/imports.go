package vms

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ImportsClient is the VM Client
type ImportsClient struct {
	BaseClient
}

// NewImportsClient creates an instance of the ImportsClient client.
func NewImportsClient() ImportsClient {
	return NewImportsClientWithBaseURI(DefaultBaseURI)
}

// NewImportsClientWithBaseURI creates an instance of the ImportsClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewImportsClientWithBaseURI(baseURI string) ImportsClient {
	return ImportsClient{NewWithBaseURI(baseURI)}
}

// Check VM  <br/>Check Import VM information
func (client ImportsClient) Check(ctx context.Context, importCheckParameters *Import) (result ImportCheckResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ImportsClient.Check")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: importCheckParameters,
			Constraints: []validation.Constraint{{Target: "importCheckParameters", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "importCheckParameters.VMDirectory", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "importCheckParameters.RemoteNAS", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "importCheckParameters.RemoteNAS.Cid", Name: validation.Null, Rule: true, Chain: nil}}},
					{Target: "importCheckParameters.VM", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "importCheckParameters.VM.Memory", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "importCheckParameters.VM.Name", Name: validation.Null, Rule: true,
								Chain: []validation.Constraint{{Target: "importCheckParameters.VM.Name", Name: validation.MaxLength, Rule: 32, Chain: nil}}},
						}},
				}}}}}); err != nil {
		return result, validation.NewError("vms.ImportsClient", "Check", err.Error())
	}

	req, err := client.CheckPreparer(ctx, importCheckParameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Check", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Check", resp, "Failure sending request")
		return
	}

	result, err = client.CheckResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Check", resp, "Failure responding to request")
		return
	}

	return
}

// CheckPreparer prepares the Check request.
func (client ImportsClient) CheckPreparer(ctx context.Context, importCheckParameters *Import) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/import_check"))
	if importCheckParameters != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(importCheckParameters))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckSender sends the Check request. The method will close the
// http.Response Body if it receives an error.
func (client ImportsClient) CheckSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CheckResponder handles the response to the Check request. The method always
// closes the http.Response Body.
func (client ImportsClient) CheckResponder(resp *http.Response) (result ImportCheckResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Config parse Import VM Config
// example:
// {"fileDirectory":"/Public/export_vm.qvm","importType":"local"}
// option: RemoteNAS
func (client ImportsClient) Config(ctx context.Context, body ImportConfigRequest) (result ImportConfigResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ImportsClient.Config")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.RemoteNAS", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.RemoteNAS.Cid", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("vms.ImportsClient", "Config", err.Error())
	}

	req, err := client.ConfigPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Config", nil, "Failure preparing request")
		return
	}

	resp, err := client.ConfigSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Config", resp, "Failure sending request")
		return
	}

	result, err = client.ConfigResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Config", resp, "Failure responding to request")
		return
	}

	return
}

// ConfigPreparer prepares the Config request.
func (client ImportsClient) ConfigPreparer(ctx context.Context, body ImportConfigRequest) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/import_config"),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ConfigSender sends the Config request. The method will close the
// http.Response Body if it receives an error.
func (client ImportsClient) ConfigSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ConfigResponder handles the response to the Config request. The method always
// closes the http.Response Body.
func (client ImportsClient) ConfigResponder(resp *http.Response) (result ImportConfigResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Download get VM list from Microsoft ToOl API
func (client ImportsClient) Download(ctx context.Context, body BodyModel) (result ImportDownloadResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ImportsClient.Download")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Path", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.URL", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("vms.ImportsClient", "Download", err.Error())
	}

	req, err := client.DownloadPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Download", nil, "Failure preparing request")
		return
	}

	resp, err := client.DownloadSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Download", resp, "Failure sending request")
		return
	}

	result, err = client.DownloadResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Download", resp, "Failure responding to request")
		return
	}

	return
}

// DownloadPreparer prepares the Download request.
func (client ImportsClient) DownloadPreparer(ctx context.Context, body BodyModel) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/import_download"),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DownloadSender sends the Download request. The method will close the
// http.Response Body if it receives an error.
func (client ImportsClient) DownloadSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DownloadResponder handles the response to the Download request. The method always
// closes the http.Response Body.
func (client ImportsClient) DownloadResponder(resp *http.Response) (result ImportDownloadResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DownloadResume VM  <br/>Resume download VM task
func (client ImportsClient) DownloadResume(ctx context.Context, body string) (result ImportDownloadResumeResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ImportsClient.DownloadResume")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DownloadResumePreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "DownloadResume", nil, "Failure preparing request")
		return
	}

	resp, err := client.DownloadResumeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "DownloadResume", resp, "Failure sending request")
		return
	}

	result, err = client.DownloadResumeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "DownloadResume", resp, "Failure responding to request")
		return
	}

	return
}

// DownloadResumePreparer prepares the DownloadResume request.
func (client ImportsClient) DownloadResumePreparer(ctx context.Context, body string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/import_download_resume"),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DownloadResumeSender sends the DownloadResume request. The method will close the
// http.Response Body if it receives an error.
func (client ImportsClient) DownloadResumeSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DownloadResumeResponder handles the response to the DownloadResume request. The method always
// closes the http.Response Body.
func (client ImportsClient) DownloadResumeResponder(resp *http.Response) (result ImportDownloadResumeResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Network VM  <br/>Get VM list from Microsoft ToOl API
func (client ImportsClient) Network(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ImportsClient.Network")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.NetworkPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Network", nil, "Failure preparing request")
		return
	}

	resp, err := client.NetworkSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Network", resp, "Failure sending request")
		return
	}

	result, err = client.NetworkResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "Network", resp, "Failure responding to request")
		return
	}

	return
}

// NetworkPreparer prepares the Network request.
func (client ImportsClient) NetworkPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/import_network"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// NetworkSender sends the Network request. The method will close the
// http.Response Body if it receives an error.
func (client ImportsClient) NetworkSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// NetworkResponder handles the response to the Network request. The method always
// closes the http.Response Body.
func (client ImportsClient) NetworkResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// VM VM  <br/>Create Import VM Task
func (client ImportsClient) VM(ctx context.Context, body Import) (result ImportVMResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ImportsClient.VM")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.VMDirectory", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.RemoteNAS", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "body.RemoteNAS.Cid", Name: validation.Null, Rule: true, Chain: nil}}},
				{Target: "body.VM", Name: validation.Null, Rule: true,
					Chain: []validation.Constraint{{Target: "body.VM.Memory", Name: validation.Null, Rule: true, Chain: nil},
						{Target: "body.VM.Name", Name: validation.Null, Rule: true,
							Chain: []validation.Constraint{{Target: "body.VM.Name", Name: validation.MaxLength, Rule: 32, Chain: nil}}},
					}}}}}); err != nil {
		return result, validation.NewError("vms.ImportsClient", "VM", err.Error())
	}

	req, err := client.VMPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "VM", nil, "Failure preparing request")
		return
	}

	resp, err := client.VMSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "VM", resp, "Failure sending request")
		return
	}

	result, err = client.VMResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vms.ImportsClient", "VM", resp, "Failure responding to request")
		return
	}

	return
}

// VMPreparer prepares the VM request.
func (client ImportsClient) VMPreparer(ctx context.Context, body Import) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/vms/import_vm"),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// VMSender sends the VM request. The method will close the
// http.Response Body if it receives an error.
func (client ImportsClient) VMSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// VMResponder handles the response to the VM request. The method always
// closes the http.Response Body.
func (client ImportsClient) VMResponder(resp *http.Response) (result ImportVMResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
