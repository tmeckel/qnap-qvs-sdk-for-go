package users

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// Client is the user Client
type Client struct {
	BaseClient
}

// NewClient creates an instance of the Client client.
func NewClient() Client {
	return NewClientWithBaseURI(DefaultBaseURI)
}

// NewClientWithBaseURI creates an instance of the Client client using a custom endpoint.  Use this when interacting
// with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewClientWithBaseURI(baseURI string) Client {
	return Client{NewWithBaseURI(baseURI)}
}

// ClearLog users  <br/>Clear the log of user
func (client Client) ClearLog(ctx context.Context, ID int32) (result UpdateClearLogTimeResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.ClearLog")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ClearLogPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "ClearLog", nil, "Failure preparing request")
		return
	}

	resp, err := client.ClearLogSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "ClearLog", resp, "Failure sending request")
		return
	}

	result, err = client.ClearLogResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "ClearLog", resp, "Failure responding to request")
		return
	}

	return
}

// ClearLogPreparer prepares the ClearLog request.
func (client Client) ClearLogPreparer(ctx context.Context, ID int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{id}/clear_log", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ClearLogSender sends the ClearLog request. The method will close the
// http.Response Body if it receives an error.
func (client Client) ClearLogSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ClearLogResponder handles the response to the ClearLog request. The method always
// closes the http.Response Body.
func (client Client) ClearLogResponder(resp *http.Response) (result UpdateClearLogTimeResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Create users  <br/>Create a new user
func (client Client) Create(ctx context.Context, body WriteUser) (result CreateResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Username", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("users.Client", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client Client) CreatePreparer(ctx context.Context, body WriteUser) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/users"),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client Client) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client Client) CreateResponder(resp *http.Response) (result CreateResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreatePermissions user VM Permissions<br/>create new permissions on VM to user
func (client Client) CreatePermissions(ctx context.Context, userID int32, vmid int32, body VMPermissionBase) (result CreateVMPermissionResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.CreatePermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePermissionsPreparer(ctx, userID, vmid, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "CreatePermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreatePermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "CreatePermissions", resp, "Failure sending request")
		return
	}

	result, err = client.CreatePermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "CreatePermissions", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePermissionsPreparer prepares the CreatePermissions request.
func (client Client) CreatePermissionsPreparer(ctx context.Context, userID int32, vmid int32, body VMPermissionBase) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user_id": autorest.Encode("path", userID),
		"vm_id":   autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user_id}/vms/{vm_id}/permissions", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreatePermissionsSender sends the CreatePermissions request. The method will close the
// http.Response Body if it receives an error.
func (client Client) CreatePermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreatePermissionsResponder handles the response to the CreatePermissions request. The method always
// closes the http.Response Body.
func (client Client) CreatePermissionsResponder(resp *http.Response) (result CreateVMPermissionResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeletePermissions user VM Permissions<br/>delete permissions on VM to user
func (client Client) DeletePermissions(ctx context.Context, userID int32, vmid int32) (result DeleteVMPermissionResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.DeletePermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePermissionsPreparer(ctx, userID, vmid)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "DeletePermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeletePermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "DeletePermissions", resp, "Failure sending request")
		return
	}

	result, err = client.DeletePermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "DeletePermissions", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePermissionsPreparer prepares the DeletePermissions request.
func (client Client) DeletePermissionsPreparer(ctx context.Context, userID int32, vmid int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user_id": autorest.Encode("path", userID),
		"vm_id":   autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user_id}/vms/{vm_id}/permissions", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeletePermissionsSender sends the DeletePermissions request. The method will close the
// http.Response Body if it receives an error.
func (client Client) DeletePermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeletePermissionsResponder handles the response to the DeletePermissions request. The method always
// closes the http.Response Body.
func (client Client) DeletePermissionsResponder(resp *http.Response) (result DeleteVMPermissionResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Destroy users  <br/>Delete a user
func (client Client) Destroy(ctx context.Context, ID int32) (result DestroyResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.Destroy")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DestroyPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Destroy", nil, "Failure preparing request")
		return
	}

	resp, err := client.DestroySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "Destroy", resp, "Failure sending request")
		return
	}

	result, err = client.DestroyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Destroy", resp, "Failure responding to request")
		return
	}

	return
}

// DestroyPreparer prepares the Destroy request.
func (client Client) DestroyPreparer(ctx context.Context, ID int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DestroySender sends the Destroy request. The method will close the
// http.Response Body if it receives an error.
func (client Client) DestroySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DestroyResponder handles the response to the Destroy request. The method always
// closes the http.Response Body.
func (client Client) DestroyResponder(resp *http.Response) (result DestroyResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetCurrentUserInfo users  <br/>Get current user profile
func (client Client) GetCurrentUserInfo(ctx context.Context) (result GetCurrentUserInfoResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.GetCurrentUserInfo")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetCurrentUserInfoPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "GetCurrentUserInfo", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetCurrentUserInfoSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "GetCurrentUserInfo", resp, "Failure sending request")
		return
	}

	result, err = client.GetCurrentUserInfoResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "GetCurrentUserInfo", resp, "Failure responding to request")
		return
	}

	return
}

// GetCurrentUserInfoPreparer prepares the GetCurrentUserInfo request.
func (client Client) GetCurrentUserInfoPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/users/current"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetCurrentUserInfoSender sends the GetCurrentUserInfo request. The method will close the
// http.Response Body if it receives an error.
func (client Client) GetCurrentUserInfoSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetCurrentUserInfoResponder handles the response to the GetCurrentUserInfo request. The method always
// closes the http.Response Body.
func (client Client) GetCurrentUserInfoResponder(resp *http.Response) (result GetCurrentUserInfoResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetPermissions user VM Permissions<br/>get permissions on VM to user
func (client Client) GetPermissions(ctx context.Context, userID int32, vmid int32) (result VMPermissionResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.GetPermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPermissionsPreparer(ctx, userID, vmid)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "GetPermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetPermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "GetPermissions", resp, "Failure sending request")
		return
	}

	result, err = client.GetPermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "GetPermissions", resp, "Failure responding to request")
		return
	}

	return
}

// GetPermissionsPreparer prepares the GetPermissions request.
func (client Client) GetPermissionsPreparer(ctx context.Context, userID int32, vmid int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user_id": autorest.Encode("path", userID),
		"vm_id":   autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user_id}/vms/{vm_id}/permissions", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetPermissionsSender sends the GetPermissions request. The method will close the
// http.Response Body if it receives an error.
func (client Client) GetPermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetPermissionsResponder handles the response to the GetPermissions request. The method always
// closes the http.Response Body.
func (client Client) GetPermissionsResponder(resp *http.Response) (result VMPermissionResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List users  <br/>Return a list of Users
func (client Client) List(ctx context.Context) (result ListResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "List", resp, "Failure responding to request")
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client Client) ListPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/users"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client Client) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client Client) ListResponder(resp *http.Response) (result ListResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Retrieve users  <br/>Find a user by id
func (client Client) Retrieve(ctx context.Context, ID int32) (result RetrieveResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.Retrieve")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RetrievePreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Retrieve", nil, "Failure preparing request")
		return
	}

	resp, err := client.RetrieveSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "Retrieve", resp, "Failure sending request")
		return
	}

	result, err = client.RetrieveResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Retrieve", resp, "Failure responding to request")
		return
	}

	return
}

// RetrievePreparer prepares the Retrieve request.
func (client Client) RetrievePreparer(ctx context.Context, ID int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RetrieveSender sends the Retrieve request. The method will close the
// http.Response Body if it receives an error.
func (client Client) RetrieveSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RetrieveResponder handles the response to the Retrieve request. The method always
// closes the http.Response Body.
func (client Client) RetrieveResponder(resp *http.Response) (result RetrieveResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Update users  <br/>Modify the user setting
func (client Client) Update(ctx context.Context, ID int32, body *WriteUser) (result UpdateResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePreparer(ctx, ID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "Update", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client Client) UpdatePreparer(ctx context.Context, ID int32, body *WriteUser) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{id}", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client Client) UpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client Client) UpdateResponder(resp *http.Response) (result UpdateResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// UpdatePermissions user VM Permissions<br/>Grant new permissions on VM to user
func (client Client) UpdatePermissions(ctx context.Context, userID int32, vmid int32, body *VMPermissionBase) (result UpdateVMPermissionResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/Client.UpdatePermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePermissionsPreparer(ctx, userID, vmid, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "UpdatePermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdatePermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "users.Client", "UpdatePermissions", resp, "Failure sending request")
		return
	}

	result, err = client.UpdatePermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "users.Client", "UpdatePermissions", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePermissionsPreparer prepares the UpdatePermissions request.
func (client Client) UpdatePermissionsPreparer(ctx context.Context, userID int32, vmid int32, body *VMPermissionBase) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user_id": autorest.Encode("path", userID),
		"vm_id":   autorest.Encode("path", vmid),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user_id}/vms/{vm_id}/permissions", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdatePermissionsSender sends the UpdatePermissions request. The method will close the
// http.Response Body if it receives an error.
func (client Client) UpdatePermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdatePermissionsResponder handles the response to the UpdatePermissions request. The method always
// closes the http.Response Body.
func (client Client) UpdatePermissionsResponder(resp *http.Response) (result UpdateVMPermissionResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
